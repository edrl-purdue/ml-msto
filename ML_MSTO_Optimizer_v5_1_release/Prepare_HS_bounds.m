% PREPARE HASHIN-SHTRIKMAN BOUNDING FUNCTIONS
function [C_lower_HS, C_upper_HS] = Prepare_HS_bounds(mat, dim, ortho) %without material properties (E, k, etc)
    K1 = mat.Emin/(3*(1-2*mat.nu));
    K2 = mat.Emax/(3*(1-2*mat.nu));
    mu1 = mat.Emin/(2*(1+mat.nu));
    mu2 = mat.Emax/(2*(1+mat.nu));
    
    if dim == 2 % 2D Plain Strain
        if ortho == 1
            C_lower_HS = @(Q) [K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C11
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C21
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C22
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))]'; % C33
            C_upper_HS = @(Q) [K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C11
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C21
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C22
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))]'; % C33
        elseif ortho == 0
            C_lower_HS = @(Q) [K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C11
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C21
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C22
                               zeros(size(Q)) % C31
                               zeros(size(Q)) % C32
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))]'; % C33
            C_upper_HS = @(Q) [K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C11
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C21
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C22
                               zeros(size(Q)) % C31
                               zeros(size(Q)) % C32
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))]'; % C33
        end
    elseif dim == 3
        if ortho == 1
            C_lower_HS = @(Q) [K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C11
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C21
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C22
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C31
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C32
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C33
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1))) % C44
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1))) % C55
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))]'; % C66
            C_upper_HS = @(Q) [K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C11
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C21
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C22
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C31
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C32
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C33
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2))) % C44
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2))) % C55
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))]'; % C66
        elseif ortho == 0
            C_lower_HS = @(Q) [K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C11
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C21
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C22
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C31
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) - (2/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C32
                               K1 + Q./((K2-K1)^-1 + (3*(1-Q))/(3*K1 + 4*mu1)) + (4/3)*(mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))) % C33
                               zeros(size(Q)) % C41
                               zeros(size(Q)) % C42
                               zeros(size(Q)) % C43
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1))) % C44
                               zeros(size(Q)) % C51
                               zeros(size(Q)) % C52
                               zeros(size(Q)) % C53
                               zeros(size(Q)) % C54
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1))) % C55
                               zeros(size(Q)) % C61
                               zeros(size(Q)) % C62
                               zeros(size(Q)) % C63
                               zeros(size(Q)) % C64
                               zeros(size(Q)) % C65
                               mu1 + Q./((mu2-mu1)^-1 + (6*(K1+2*mu1)*(1-Q))/(5*mu1*(3*K1+4*mu1)))]'; % C66
            C_upper_HS = @(Q) [K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C11
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C21
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C22
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C31
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) - (2/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C32
                               K2 + (1-Q)./((K1-K2)^-1 + (3*Q)/(3*K2 + 4*mu2)) + (4/3)*(mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))) % C33
                               zeros(size(Q)) % C41
                               zeros(size(Q)) % C42
                               zeros(size(Q)) % C43
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2))) % C44
                               zeros(size(Q)) % C51
                               zeros(size(Q)) % C52
                               zeros(size(Q)) % C53
                               zeros(size(Q)) % C54
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2))) % C55
                               zeros(size(Q)) % C61
                               zeros(size(Q)) % C62
                               zeros(size(Q)) % C63
                               zeros(size(Q)) % C64
                               zeros(size(Q)) % C65
                               mu2 + (1-Q)./((mu1-mu2)^-1 + (6*(K2+2*mu2)*Q)/(5*mu2*(3*K2+4*mu2)))]'; % C66
        end
    end
end